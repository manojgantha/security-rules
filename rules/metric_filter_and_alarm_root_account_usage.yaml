id: 0880a6ee-1b32-4adc-b876-793c3a658c79
ruleId: aws_034
type: asset
ruleName: >
  Ensure a log metric filter and alarm exist for usage of "root" account
description: >
  Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to
  CloudWatch Logs and establishing corresponding metric filters and alarms. It is
  recommended that a metric filter and alarm be established for root login attempts.
severity: high
enabled: true
sql: >
  WITH
  get_group_names AS (
    SELECT log_group_name
     FROM
      (SELECT asset_id,
          jsonb_array_elements(supplementary_configuration->'eventSelectors'->'eventSelectors') AS event_selector,
          regexp_replace(regexp_replace(supplementary_configuration->'trailDetails'->'trail'->>'cloudWatchLogsLogGroupArn', '.*log-group:', ''), ':\*', '') AS log_group_name
      FROM assets
      WHERE resource_type = 'AWS::CloudTrail::Trail' AND supplementary_configuration->'trailDetails'->'trail'->'isMultiRegionTrail' = 'true' AND supplementary_configuration->'status'->'isLogging' = 'true') get_log_group_name_table
    WHERE event_selector->'includeManagementEvents' = 'true' AND event_selector->>'readWriteType' = 'All'
  ),
  get_metric_filters AS (
    SELECT jsonb_array_elements(configuration->'metricTransformations') AS metric
    FROM assets AS metric_filters, get_group_names
    WHERE metric_filters.resource_type = 'AWS::CloudWatchLogs::MetricFilter' AND metric_filters.configuration->>'logGroupName' = get_group_names.log_group_name
      AND regexp_replace(metric_filters.configuration->>'filterPattern', '\s', '', 'g') LIKE regexp_replace('%' || ' $.userIdentity.type = "Root" && $.userIdentity.invokedBy NOT EXISTS && $.eventType != "AwsServiceEvent"' || '%', '\s', '', 'g')
  ),
  get_alarm_topic AS (
    SELECT regexp_replace(jsonb_array_elements(configuration->'alarmActions')::TEXT, '\"', '', 'g') AS topic_arn
    FROM assets AS alarms, get_metric_filters
    WHERE alarms.resource_type = 'AWS::CloudWatch::Alarm' AND alarms.configuration->>'metricName' = get_metric_filters.metric->>'metricName'
  ),
  get_topic_subscribers_confirmed AS (
    SELECT awssnstopic.configuration->'attributes'->>'SubscriptionsConfirmed' AS subscribers_number
    FROM get_alarm_topic, assets AS awssnstopic
    WHERE awssnstopic.resource_type='AWS::SNS::Topic' AND get_alarm_topic.topic_arn = awssnstopic.asset_id
  )

  SELECT 'No log metric filter and alarm exist for usage of "root" account' AS asset_id
  WHERE NOT EXISTS
      (SELECT *
       FROM get_group_names)
    OR NOT EXISTS
      (SELECT *
       FROM get_metric_filters)
    OR EXISTS
      (SELECT *
       FROM get_topic_subscribers_confirmed
       WHERE subscribers_number = '0');
remediation: >
  Perform the following to setup the metric filter, alarm, SNS topic, and subscription:
    1. Create a metric filter based on filter pattern provided which checks for "Root"
    account usage and the <cloudtrail_log_group_name> taken from audit step 1.
      aws logs put-metric-filter --log-group-name `<cloudtrail_log_group_name>` --
      filter-name `<root_usage_metric>` --metric-transformations metricName=
      `<root_usage_metric>` ,metricNamespace='CISBenchmark',metricValue=1 --filterpattern '{ $.userIdentity.type = "Root" && $.userIdentity.invokedBy NOT
      EXISTS && $.eventType != "AwsServiceEvent" }'
    Note: You can choose your own metricName and metricNamespace strings. Using the same
    metricNamespace for all Foundations Benchmark metrics will group them together.
    2. Create an SNS topic that the alarm will notify
      aws sns create-topic --name <sns_topic_name>
    Note: you can execute this command once and then re-use the same topic for all
    monitoring alarms.
    3. Create an SNS subscription to the topic created in step 2
      aws sns subscribe --topic-arn <sns_topic_arn> --protocol <protocol_for_sns> -
      -notification-endpoint <sns_subscription_endpoints>
    Note: you can execute this command once and then re-use the SNS subscription for all
    monitoring alarms.
    4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in
    step 1 and an SNS topic created in step 2
      aws cloudwatch put-metric-alarm --alarm-name `<root_usage_alarm>` --metricname `<root_usage_metric>` --statistic Sum --period 300 --threshold 1 --
      comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --
      namespace 'CISBenchmark' --alarm-actions <sns_topic_arn>
remediationDocURLs:
  - https://docs.openraven.com/remediations/log_metric_filter_and_alarm_for_root_account_usage
version: 0.1.3
